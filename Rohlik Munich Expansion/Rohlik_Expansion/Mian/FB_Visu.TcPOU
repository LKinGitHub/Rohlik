<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Visu" Id="{80f0fe96-1376-4f3c-ab9b-90ae9e44b11c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Visu
VAR_INPUT
	id	:INT;
	// =============== Keys =====================================
	aKeyPressed						: ARRAY [1..12] OF BOOL;
	aUnitInfo						: ARRAY [1..12] OF ST_UnitInfo;
	aUnitCommand					: ARRAY [1..12] OF E_PMLCommand;
END_VAR
VAR_OUTPUT
	
	//=============== Cheking Button and entries =======================
	bInvalidEntry					: BOOL;						//Invalid entry, to produce products

	// =============== Keys =====================================
	aCaption						: ARRAY [1..12] OF STRING;	

	eModeVisu						: DINT;						// Mode for the 	StateChart	
	eStateVisu						: E_PMLState;				// State for the StateChart
	sUnitName						: STRING;
	iFrameVisible					: DINT;
	eUnitCommand					: E_PMLCommand;
END_VAR
VAR
	i								: DINT;

	// =============== Statechart variables ===================
	eUnitRepresentOnVisu			: E_UnitName := eMachine;	// Unit represent on Visu
		
	// =============== Warnings ===============================================
	sWarningVisu					: STRING;					// Descripton, name of the warning
	fbTimerWarning					: TON;						// Timer for visu textbox
	nWarningState					: INT :=0;					// State for representing warnings
	nWarningCount					: INT :=1;					// Variable to runs step by step trough the warningarray
	
	// =============== Errors ===============================================
	sAlarmVisu						: STRING;					// Descripton, name of the error
	fbTimerAlarm					: TON;						// Timer for visu textbox
	nAlarmState						: INT :=0;					// State for representing errors
	nAlarmCount						: INT :=1;					// Variable to runs step by step trough the errorarray
	
	nState							: INT;
	
END_VAR
VAR CONSTANT	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// =========================================================
// Select visible frame
aCaption[1] := 'Overview';
aCaption[2] := 'Machine';
//aCaption[3] := GVL.fb_sample.sInstanceName;
aCaption[3] := GVL.fb_loading.sInstanceName;
aCaption[4] := GVL.fb_working1.sInstanceName;
aCaption[5] := GVL.fb_working2.sInstanceName;

FOR i := 1 TO 11 DO
	IF aKeyPressed[i] THEN
		iFrameVisible := i - 1;		
	END_IF
END_FOR

IF iFrameVisible <= 1 THEN
	eModeVisu := aUnitInfo[1].ActMode;
	eStateVisu := aUnitInfo[1].ActState;
	sUnitName := aUnitInfo[1].Name;
	eUnitCommand	:= aUnitCommand[1];
ELSE
	eModeVisu := aUnitInfo[iFrameVisible].ActMode;
	eStateVisu := aUnitInfo[iFrameVisible].ActState;
	sUnitName := aUnitInfo[iFrameVisible].Name;
	aUnitCommand[iFrameVisible]	:= eUnitCommand;
END_IF

// =========================================================
// Visuazation functions
	
	// Checking production command
	M_ProductCommand();
	
	// Show Erorrs in Textbox
	M_Error_Warnings();
	


]]></ST>
    </Implementation>
    <Method Name="M_Error_Warnings" Id="{8182f2e5-773a-4595-83bc-25d07655545e}">
      <Declaration><![CDATA[METHOD M_Error_Warnings
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Show the Warnings on Visu
CASE nWarningState OF
	0:
		sWarningVisu					:= '';
		IF GVL.PackTags.Admin.Warning[nWarningCount].Trigger THEN
			fbTimerWarning.IN 		:= TRUE;
			fbTimerWarning.PT		:= T#1S;
			nWarningState			:= 1;
		ELSIF nWarningCount < 10 THEN
			nWarningCount		:= nWarningCount +1;
		ELSIF nWarningCount >= 10 THEN
			nWarningCount		:= 1;
		END_IF
	1:
		sWarningVisu 	:= GVL.PackTags.Admin.Warning[nWarningCount].Message;
		IF fbTimerWarning.Q THEN
			fbTimerWarning.IN 		:= FALSE;
			nWarningState			:= 0;
			
			IF nWarningCount < 10 THEN
				nWarningCount		:= nWarningCount +1;
			ELSIF nWarningCount >= 10 THEN
				nWarningCount		:= 1;
			END_IF
		END_IF
		
END_CASE	
fbTimerWarning();

//Show the Errors on Visu
CASE nAlarmState OF
	0:
		sAlarmVisu					:= '';
		IF GVL.PackTags.Admin.Alarm[nAlarmCount].Trigger THEN
			fbTimerAlarm.IN 		:= TRUE;
			fbTimerAlarm.PT		:= T#1S;
			nAlarmState			:= 1;
		ELSIF nAlarmCount < 10 THEN
			nAlarmCount		:= nAlarmCount +1;
		ELSIF nAlarmCount >= 10 THEN
			nAlarmCount		:= 1;
		END_IF
	1:
		sAlarmVisu 	:= GVL.PackTags.Admin.Alarm[nAlarmCount].Message;
		IF fbTimerAlarm.Q THEN
			fbTimerAlarm.IN 		:= FALSE;
			nAlarmState			:= 0;
			
			IF nAlarmCount < 10 THEN
				nAlarmCount		:= nAlarmCount +1;
			ELSIF nAlarmCount >= 10 THEN
				nAlarmCount		:= 1;
			END_IF
		END_IF
END_CASE
fbTimerAlarm();

////////////////////////////////////////alarms shows on hmi alams table///////////////////////////////////
FOR i := 1 TO GVL.iAlarm_max DO
	IF GVL.PackTags.Admin.Alarm[i].Trigger THEN
		GVL.alarms_hmi[i].msg	:= GVL.PackTags.Admin.Alarm[i].Message;
		GVL.alarms_hmi[i].str_DT	:=Prepare_Date_Time(GVL.PackTags.Admin.Alarm[i].DateTime);		
	ELSE
		GVL.alarms_hmi[i].msg	:= '';
		GVL.alarms_hmi[i].str_DT	:='';		
	END_IF
END_FOR



////////////////////////////////////////alarms shows on hmi alams table///////////////////////////////////
FOR i := 1 TO GVL.iAlarm_max DO
	IF GVL.PackTags1.Admin.Alarm[i].Trigger THEN
		GVL.alarms1_hmi[i].msg	:= GVL.PackTags1.Admin.Alarm[i].Message;
		GVL.alarms1_hmi[i].str_DT	:=Prepare_Date_Time(GVL.PackTags1.Admin.Alarm[i].DateTime);		
	ELSE
		GVL.alarms1_hmi[i].msg	:= '';
		GVL.alarms1_hmi[i].str_DT	:='';		
	END_IF
END_FOR

////////////////////////////////////////alarms shows on hmi alams table///////////////////////////////////
FOR i := 1 TO GVL.iAlarm_max DO
	IF GVL.PackTags2.Admin.Alarm[i].Trigger THEN
		GVL.alarms2_hmi[i].msg	:= GVL.PackTags2.Admin.Alarm[i].Message;
		GVL.alarms2_hmi[i].str_DT	:=Prepare_Date_Time(GVL.PackTags2.Admin.Alarm[i].DateTime);		
	ELSE
		GVL.alarms2_hmi[i].msg	:= '';
		GVL.alarms2_hmi[i].str_DT	:='';		
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ProductCommand" Id="{f529bae9-d7a2-4813-9050-0bcc90aae43d}">
      <Declaration><![CDATA[METHOD M_ProductCommand

]]></Declaration>
      <Implementation>
        <ST><![CDATA[//checking if productcommand is valid
IF	GVL.nVisuProductCommand > GVL.PackTags.Admin.ProdProcessedCount[1].Count	AND 
	GVL.nVisuProductCommand > GVL.PackTags.Admin.ProdProcessedCount[2].Count	AND 
	GVL.nVisuProductCommand > 0											THEN
			bInvalidEntry						:= FALSE;
			GVL.PackTags.Command.Parameter[1].Value := DINT_TO_REAL(GVL.nVisuProductCommand);
ELSIF	GVL.nVisuProductCommand < GVL.PackTags.Admin.ProdProcessedCount[1].Count	OR
		GVL.nVisuProductCommand < GVL.PackTags.Admin.ProdProcessedCount[2].Count	OR
		GVL.nVisuProductCommand < 0											THEN
			bInvalidEntry						:= TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Visu">
      <LineId Id="3" Count="4" />
      <LineId Id="9" Count="0" />
      <LineId Id="437" Count="2" />
      <LineId Id="16" Count="9" />
      <LineId Id="391" Count="0" />
      <LineId Id="26" Count="3" />
      <LineId Id="392" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="45" Count="2" />
      <LineId Id="61" Count="6" />
      <LineId Id="114" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Visu.M_Error_Warnings">
      <LineId Id="76" Count="89" />
      <LineId Id="61" Count="0" />
    </LineIds>
    <LineIds Name="FB_Visu.M_ProductCommand">
      <LineId Id="3" Count="10" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>