<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Machine" Id="{8f8b4044-4b54-4b05-9dcb-51655cce136f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Machine EXTENDS FB_Generic
VAR_INPUT
	pPML_Instance1	: POINTER TO FB_Generic;
	pPML_Instance2	: POINTER TO FB_Generic;//instance for couple and uncouple
	pPackTags		: POINTER TO ST_PackMLv30;
	pSafetySystem			: POINTER TO FB_Safety_Subsystem;
END_VAR
VAR_OUTPUT

END_VAR
VAR	
	stSubModuleInfo		: ARRAY [1..iSubModule] OF ST_PMLSubUnitInfo;	//Informations about the Subunits
//	pPML_Instance	: ARRAY [1..iSubModule] OF POINTER TO FB_Generic;
	arrCouple	: ARRAY [1..iSubModule] OF BOOL;
	arrCmd		: ARRAY [1..iSubModule] OF E_PMLCommand;
	unCouple	: BOOL;//all modules uncoupling
	
	rtrig_alarm	:ARRAY [1..iSubModule] OF ARRAY[1..MaxAlarms] OF R_TRIG;
	
	iCmd_unitsActive	: INT;
	iCmd_transfer	: INT;


	preEstate	: E_PMLState;
	
END_VAR
VAR CONSTANT
	iSubModule	: UINT :=2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//pPML_Instance[1]	:= ADR(GVL.fb_sample1);
//pPML_Instance[2]	:= ADR(GVL.fb_sample2);
///////////////////////////////////////////for signal system/////////////////////////////////////////////////////////////
IF NOT unCouple THEN
	FOR i:=1 TO UINT_TO_INT(iSubModule) DO
		arrCmd[i]:=eCommand;
		arrCouple[i]:= TRUE;
//		pPML_Instance[i]^._bCouple	:= TRUE;

	END_FOR
END_IF
unCouple	:= TRUE;//for mix sysytem
//////////////////////////////////////////////couple cmd//////////////////////////////////////////////////////////
//FOR i:=1 TO UINT_TO_INT(iSubModule) DO
//	IF arrCouple[i] THEN
//		arrCmd[i]:=eCommand;
//	END_IF
//END_FOR

CASE iCmd_transfer OF	
	0:
		IF eCommand<>ePMLCommand_Undefined THEN
			iCmd_transfer	:= 1;
		END_IF
	1:	
		IF arrCouple[1] THEN
			arrCmd[1]	:= eCommand;
		END_IF
		IF arrCouple[2] THEN
			arrCmd[2]	:= eCommand;
		END_IF
		iCmd_transfer	:= 2;	
	2:
		CASE preEstate OF
			ePMLState_Undefined:
				IF eState=ePMLState_Aborted THEN
					iCmd_transfer	:= 3;
				END_IF			
			ePMLState_Aborted,ePMLState_Clearing:
				IF eState=ePMLState_Stopped OR eState=ePMLState_Aborted THEN
					iCmd_transfer	:= 3;
				END_IF
			ePMLState_Stopped,ePMLState_Resetting:
				IF eState=ePMLState_Idle OR eState=ePMLState_Aborted THEN
					iCmd_transfer	:= 3;
				END_IF				
			ePMLState_Idle,ePMLState_Starting:
				IF eState=ePMLState_Execute OR eState=ePMLState_Stopped OR eState=ePMLState_Aborted THEN
					iCmd_transfer	:= 3;
				END_IF				
			ePMLState_Execute,ePMLState_Aborting,ePMLState_Stopping:
				IF eState=ePMLState_Stopped OR eState=ePMLState_Aborted THEN
					iCmd_transfer	:= 3;
				END_IF				
		END_CASE	
	3:
		arrCouple[2]	:= FALSE;
		arrCmd[1]	:=	ePMLCommand_Undefined;
		arrCmd[2]	:=	ePMLCommand_Undefined;
		iCmd_transfer	:= 0;	
END_CASE



pPML_Instance1^(
	eModeCommand:= eModeCommand, 
	eCommand:= arrCmd[1], 
	eMode=> , 
	eState=> stSubModuleInfo[1].eState, 
	bUndefinedDone=> , 
	bInvalidModeCommandOut=> , 
	bChangeIntoProduction=> );
stSubModuleInfo[1].Active		:= arrCouple[1];

pPML_Instance2^(
	eModeCommand:= eModeCommand, 
	eCommand:= , 
	eMode=> , 
	eState=> stSubModuleInfo[2].eState, 
	bUndefinedDone=> , 
	bInvalidModeCommandOut=> , 
	bChangeIntoProduction=> );
IF stSubModuleInfo[2].Active THEN
	pPML_Instance2^.eCommand	:= arrCmd[2];
END_IF	
stSubModuleInfo[2].Active		:= arrCouple[2];




IF  pPML_Instance1^.bUndefinedDone AND 
	pPML_Instance2^.bUndefinedDone 
THEN
	bUndefinedDone := TRUE;
END_IF

//The fbStateMachine from FB_Machine gets the Information about the states and activity from the subunits
fbStateMachine.stSubUnitInfoRef.ArraySize		:= SIZEOF(stSubModuleInfo);
fbStateMachine.stSubUnitInfoRef.NoOfSubUnits	:= iSubModule;
fbStateMachine.stSubUnitInfoRef.pArray			:= ADR(stSubModuleInfo);



//Set unit information 
M_SetUnitInfo();






SUPER^();]]></ST>
    </Implementation>
    <Method Name="M_Clearing" Id="{242a7bec-354c-403a-8360-5cddeab3cb27}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Clearing'}
METHOD M_Clearing
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production:		//Production, Mantainance, Manual
		FOR i:=1 TO 3 DO//try clear alarm several times
			FOR j:=1 TO MaxAlarms DO
				GVL.pml_adminAlarm.M_AcknowledgeAlarm(stAdmin:=pPackTags^.Admin,stAlarm:=pPackTags^.Admin.Alarm[j]);
				GVL.pml_adminAlarm.M_ClearAlarm(stAdmin:=pPackTags^.Admin,stAlarm:=pPackTags^.Admin.Alarm[j]);
			END_FOR	
		END_FOR	
		IF pSafetySystem^.M_reset() THEN
			IF pSafetySystem^.xError THEN
				IF M_UnitsActive(ePMLCommand_Abort)THEN
					eCommand	:= ePMLCommand_Abort;
				END_IF
			ELSE
				M_StateComplete();
			END_IF
		END_IF	
		
	
	ePMLProtUnitMode_Maintenance, ePMLProtUnitMode_Manual, ePMLUnitMode_Service:
		M_StateComplete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{41e5f6e5-a4a2-4dc8-bbd5-97eabfb821d3}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Execute'}
METHOD M_Execute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resetting" Id="{c82aab94-be7d-4f8e-a811-07458a877516}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Resetting'}
METHOD M_Resetting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production:		//Production, Mantainance, Manual	
		IF pSafetySystem^.M_reset() THEN
			IF pSafetySystem^.xError THEN
				IF M_UnitsActive(ePMLCommand_Abort)THEN
					eCommand	:= ePMLCommand_Abort;
				END_IF
			ELSE
				M_StateComplete();
			END_IF
		END_IF	
		
	
	ePMLProtUnitMode_Maintenance, ePMLProtUnitMode_Manual, ePMLUnitMode_Service:
		M_StateComplete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetUnitInfo" Id="{1ffbecee-8eda-4bb4-8a81-6dafcd0ad308}">
      <Declaration><![CDATA[METHOD M_SetUnitInfo
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.aUnitInfo[eMachine].Name			:= 'fbMachine';
GVL.aUnitInfo[eMachine].ActMode			:= eMode;
GVL.aUnitInfo[eMachine].ActState		:= eState;

GVL.aUnitInfo[eWorking1].Name			:= GVL.fb_working1._sInstanceName;
GVL.aUnitInfo[eWorking1].ActMode		:= GVL.fb_working1.eMode;
GVL.aUnitInfo[eWorking1].ActState		:= GVL.fb_working1.eState;

GVL.aUnitInfo[eLoading].Name			:= GVL.fb_loading._sInstanceName;
GVL.aUnitInfo[eLoading].ActMode			:= GVL.fb_loading.eMode;
GVL.aUnitInfo[eLoading].ActState		:= GVL.fb_loading.eState;

GVL.aUnitInfo[eWorking2].Name			:= GVL.fb_working2._sInstanceName;
GVL.aUnitInfo[eWorking2].ActMode		:= GVL.fb_working2.eMode;
GVL.aUnitInfo[eWorking2].ActState		:= GVL.fb_working2.eState;




]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{607735ee-5540-4bee-8bb9-efaec3726053}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Starting'}
METHOD M_Starting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production:		//Production, Mantainance, Manual
		//Resetting all Commands and Value
		G_HMI.bAging_test	:= FALSE;
		M_StateComplete();
	ePMLProtUnitMode_Maintenance, ePMLProtUnitMode_Manual, ePMLUnitMode_Service:
		M_StateComplete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_UnitsActive" Id="{7bdd32b7-6eb3-45fa-829d-2018203ee44d}">
      <Declaration><![CDATA[//nomal
//idle/excute->stop 	idle/excute->abort
//loding error->abort
METHOD M_UnitsActive : BOOL
VAR_INPUT
	preCmd	: E_PMLCommand;
END_VAR
VAR 
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_UnitsActive	:= FALSE;




CASE iCmd_unitsActive OF
	0:
		iCmd_unitsActive	:= 1;
		iCmd_transfer	:= 0;
//get the command from main
	1:
		iCmd_unitsActive	:= 2;
//verify state
	2:
		IF NOT pSafetySystem^.xEstop THEN//no matter in which state,couple all the units
			arrCouple[1]	:= TRUE;
			arrCouple[2]	:= TRUE;	
			iCmd_unitsActive	:= 4;		
		ELSE
			IF (stSubModuleInfo[1].eState=ePMLState_Aborted OR stSubModuleInfo[1].eState=ePMLState_Stopped OR
				stSubModuleInfo[1].eState=ePMLState_Idle OR stSubModuleInfo[1].eState=ePMLState_Execute) AND
				(stSubModuleInfo[2].eState=ePMLState_Aborted OR stSubModuleInfo[2].eState=ePMLState_Stopped OR
				stSubModuleInfo[2].eState=ePMLState_Idle OR stSubModuleInfo[2].eState=ePMLState_Execute) AND
				(eState=ePMLState_Aborted OR eState=ePMLState_Stopped OR eState=ePMLState_Idle OR eState=ePMLState_Execute)
			THEN
				iCmd_unitsActive	:= 3;
			END_IF
		END_IF
//determine if couple or not
	3:
		CASE stSubModuleInfo[1].eState OF
			ePMLState_Aborted:
				CASE stSubModuleInfo[2].eState OF
					ePMLState_Aborted:
						CASE preCmd OF
							ePMLCommand_Clear:
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= TRUE;	
							ePMLCommand_Reset:	
								//					
							ePMLCommand_Start:	
								//
							ePMLCommand_Stop:	
								//
							ePMLCommand_Abort:
								IF pPML_Instance2^.isError OR pSafetySystem^.xEstop_behavior THEN
									arrCouple[2]	:= TRUE;
								ELSE
									arrCouple[2]	:= FALSE;
								END_IF									
						END_CASE						
					ePMLState_Stopped:
						CASE preCmd OF
							ePMLCommand_Clear:
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= FALSE;	
							ePMLCommand_Reset:	
								//					
							ePMLCommand_Start:	
								//
							ePMLCommand_Stop:	
								//
							ePMLCommand_Abort:
								IF pPML_Instance2^.isError OR pSafetySystem^.xEstop_behavior THEN
									arrCouple[2]	:= TRUE;
								ELSE
									arrCouple[2]	:= FALSE;
								END_IF									
						END_CASE					
					ePMLState_Idle:
						CASE preCmd OF
							ePMLCommand_Clear:
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= FALSE;	
							ePMLCommand_Reset:	
								//					
							ePMLCommand_Start:	
								//
							ePMLCommand_Stop:	
								//
							ePMLCommand_Abort:
								IF pPML_Instance2^.isError OR pSafetySystem^.xEstop_behavior THEN
									arrCouple[2]	:= TRUE;
								ELSE
									arrCouple[2]	:= FALSE;
								END_IF									
						END_CASE
					ePMLState_Execute:
						CASE preCmd OF
							ePMLCommand_Clear:
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= FALSE;	
							ePMLCommand_Reset:	
								//					
							ePMLCommand_Start:	
								//
							ePMLCommand_Stop:	
								//
							ePMLCommand_Abort:
								IF pPML_Instance2^.isError OR pSafetySystem^.xEstop_behavior THEN
									arrCouple[2]	:= TRUE;
								ELSE
									arrCouple[2]	:= FALSE;
								END_IF									
						END_CASE	
				END_CASE		
			ePMLState_Stopped:
				CASE stSubModuleInfo[2].eState OF	
					ePMLState_Aborted:
						//
					ePMLState_Stopped:
						CASE preCmd OF
							ePMLCommand_Clear:
								//
							ePMLCommand_Reset:	
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= TRUE;						
							ePMLCommand_Start:	
								//
							ePMLCommand_Stop:	
								//
							ePMLCommand_Abort:
								IF pPML_Instance2^.isError OR pSafetySystem^.xEstop_behavior THEN
									arrCouple[2]	:= TRUE;
								ELSE
									arrCouple[2]	:= FALSE;
								END_IF									
						END_CASE					
					ePMLState_Idle:
						CASE preCmd OF
							ePMLCommand_Clear:
								//
							ePMLCommand_Reset:	
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= FALSE;						
							ePMLCommand_Start:	
								//
							ePMLCommand_Stop:	
								//
							ePMLCommand_Abort:
								IF pPML_Instance2^.isError OR pSafetySystem^.xEstop_behavior THEN
									arrCouple[2]	:= TRUE;
								ELSE
									arrCouple[2]	:= FALSE;
								END_IF									
						END_CASE					
					ePMLState_Execute:
						CASE preCmd OF
							ePMLCommand_Clear:
								//
							ePMLCommand_Reset:	
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= FALSE;						
							ePMLCommand_Start:	
								//
							ePMLCommand_Stop:	
								//
							ePMLCommand_Abort:
								IF pPML_Instance2^.isError OR pSafetySystem^.xEstop_behavior THEN
									arrCouple[2]	:= TRUE;
								ELSE
									arrCouple[2]	:= FALSE;
								END_IF									
						END_CASE					
				END_CASE	

	
			ePMLState_Idle:
				CASE stSubModuleInfo[2].eState OF	
					ePMLState_Aborted:
						//
					ePMLState_Stopped:
						//
					ePMLState_Idle:
						CASE preCmd OF
							ePMLCommand_Clear:
								//
							ePMLCommand_Reset:	
								//						
							ePMLCommand_Start:	
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= TRUE;
							ePMLCommand_Stop:	
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= FALSE;									
							ePMLCommand_Abort:
								IF pPML_Instance2^.isError OR pSafetySystem^.xEstop_behavior THEN
									arrCouple[2]	:= TRUE;
								ELSE
									arrCouple[2]	:= FALSE;
								END_IF									
						END_CASE					
					ePMLState_Execute:
						CASE preCmd OF
							ePMLCommand_Clear:
								//
							ePMLCommand_Reset:	
								//						
							ePMLCommand_Start:	
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= FALSE;
							ePMLCommand_Stop:	
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= FALSE;									
							ePMLCommand_Abort:
								IF pPML_Instance2^.isError OR pSafetySystem^.xEstop_behavior THEN
									arrCouple[2]	:= TRUE;
								ELSE
									arrCouple[2]	:= FALSE;
								END_IF									
						END_CASE
				END_CASE	
			ePMLState_Execute:
				CASE stSubModuleInfo[2].eState OF	
					ePMLState_Aborted:
						//
					ePMLState_Stopped:
						//
					ePMLState_Idle:
						//
					ePMLState_Execute:
						CASE preCmd OF
							ePMLCommand_Clear:
								//
							ePMLCommand_Reset:	
								//						
							ePMLCommand_Start:	
								//
							ePMLCommand_Stop:	
								arrCouple[1]	:= TRUE;
								arrCouple[2]	:= FALSE;									
							ePMLCommand_Abort:
								IF pPML_Instance2^.isError OR pSafetySystem^.xEstop_behavior THEN
									arrCouple[2]	:= TRUE;
								ELSE
									arrCouple[2]	:= FALSE;
								END_IF									
						END_CASE	
				END_CASE	
		END_CASE
		iCmd_unitsActive	:= 4;
		
	4:
		preEstate	:= eState;
		iCmd_unitsActive	:= 0;
		M_UnitsActive	:= TRUE	;
	
//set the command to units
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Machine">
      <LineId Id="920" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="325" Count="1" />
      <LineId Id="329" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="398" Count="1" />
      <LineId Id="397" Count="0" />
      <LineId Id="1059" Count="0" />
      <LineId Id="693" Count="0" />
      <LineId Id="1060" Count="0" />
      <LineId Id="1063" Count="0" />
      <LineId Id="1069" Count="1" />
      <LineId Id="1075" Count="6" />
      <LineId Id="1071" Count="1" />
      <LineId Id="1082" Count="0" />
      <LineId Id="1102" Count="0" />
      <LineId Id="1104" Count="1" />
      <LineId Id="1103" Count="0" />
      <LineId Id="1083" Count="15" />
      <LineId Id="1073" Count="0" />
      <LineId Id="1099" Count="0" />
      <LineId Id="1101" Count="0" />
      <LineId Id="1106" Count="1" />
      <LineId Id="1074" Count="0" />
      <LineId Id="1136" Count="0" />
      <LineId Id="1061" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="860" Count="8" />
      <LineId Id="871" Count="12" />
      <LineId Id="885" Count="7" />
      <LineId Id="102" Count="0" />
      <LineId Id="59" Count="5" />
      <LineId Id="67" Count="3" />
      <LineId Id="321" Count="3" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_Clearing">
      <LineId Id="2" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="59" Count="2" />
      <LineId Id="17" Count="7" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_Execute">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_Resetting">
      <LineId Id="3" Count="1" />
      <LineId Id="60" Count="1" />
      <LineId Id="68" Count="1" />
      <LineId Id="62" Count="3" />
      <LineId Id="51" Count="0" />
      <LineId Id="45" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_SetUnitInfo">
      <LineId Id="3" Count="6" />
      <LineId Id="55" Count="2" />
      <LineId Id="54" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="64" Count="3" />
      <LineId Id="63" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_Starting">
      <LineId Id="3" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_UnitsActive">
      <LineId Id="98" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="365" Count="1" />
      <LineId Id="158" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="342" Count="0" />
      <LineId Id="15" Count="4" />
      <LineId Id="349" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="20" Count="3" />
      <LineId Id="377" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="116" Count="0" />
      <LineId Id="27" Count="5" />
      <LineId Id="159" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="165" Count="1" />
      <LineId Id="168" Count="2" />
      <LineId Id="172" Count="3" />
      <LineId Id="171" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="177" Count="15" />
      <LineId Id="176" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="194" Count="15" />
      <LineId Id="40" Count="1" />
      <LineId Id="210" Count="15" />
      <LineId Id="43" Count="4" />
      <LineId Id="49" Count="1" />
      <LineId Id="233" Count="1" />
      <LineId Id="236" Count="2" />
      <LineId Id="249" Count="0" />
      <LineId Id="239" Count="9" />
      <LineId Id="232" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="251" Count="15" />
      <LineId Id="250" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="269" Count="15" />
      <LineId Id="268" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="60" Count="2" />
      <LineId Id="64" Count="1" />
      <LineId Id="67" Count="1" />
      <LineId Id="289" Count="3" />
      <LineId Id="294" Count="2" />
      <LineId Id="305" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="298" Count="6" />
      <LineId Id="288" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="307" Count="16" />
      <LineId Id="73" Count="4" />
      <LineId Id="79" Count="1" />
      <LineId Id="82" Count="1" />
      <LineId Id="85" Count="1" />
      <LineId Id="324" Count="5" />
      <LineId Id="331" Count="9" />
      <LineId Id="123" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="367" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="356" Count="1" />
      <LineId Id="355" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="96" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>